/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timetablemanagementsystem;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
//import com.mysql.cj.protocol.Resultset;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import static java.lang.Thread.sleep;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.sql.Time;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hasitha
 */
public class SchedulingModule extends javax.swing.JFrame {
    private static com.itextpdf.text.Font medium = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 18,com.itextpdf.text.Font.NORMAL);
    private static com.itextpdf.text.Font large = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 22,com.itextpdf.text.Font.NORMAL);
    SchedulingModule frame = this; 
    int count;
    private int deleteItem;

    /**
     * Creates new form SchedulingModule
     */
    
    
    public void curDate(){
        Thread curDate = new Thread(){
            @Override
            public void run(){
                try {
                    while(true){
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("YYYY-MM-dd HH:mm:ss");
                    LocalDateTime now = LocalDateTime.now();
                    Date.setText(dtf.format(now));
                    sleep(1000);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        curDate.start();
        
    }
    
    public SchedulingModule() {
         this.setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\Hasitha\\Documents\\NetBeansProjects\\TimeTableManagementSystem\\src\\timetablemanagementsystem\\hasi.png"));
        initComponents();
        curDate();
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width/2-getWidth()/2, size.height/2-getHeight()/2);
    }
    public void showDB(){
               try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3310/timetablemanagement","root","");
            Statement st = con.createStatement();
            String sql = "select * from schedulingtable order by Date asc, Time asc";
            ResultSet rs = st.executeQuery(sql);
            
            while(rs.next()){
                String Date = rs.getString("Date");
                String Time = rs.getString("Time");
                String Subject = rs.getString("Subject");
                String Subject_code = rs.getString("Subject_Code");
                String Instructor_Name = rs.getString("Instructor_Name");
                String Class_Name = rs.getString("Class_Name");
                String Number_of_Student = rs.getString("Number_of_Student");
                String cc = rs.getString("count");
                
                String tableData[] = {Date,Time,Subject,Subject_code,Instructor_Name,Class_Name,Number_of_Student,cc};
                DefaultTableModel tableModel = (DefaultTableModel) Tablefortimetable.getModel();
                
                tableModel.addRow(tableData);
            }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
     }
        
    public void ClearFields(){
        
        subject.setText(null);
        subjectcode.setText(null);
        instructorname.setText(null);
//        classname.setText(null);
        noofstudent.setText(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void updateDB(){
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3310/timetablemanagement","root","");
            Statement st = con.createStatement();
            String sql = "select * from schedulingtable";
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery(sql);
            
            ResultSetMetaData stData = rs.getMetaData();
            int q = stData.getColumnCount();
            
            // to backup purposes
            Class.forName("com.mysql.jdbc.Driver");
            Connection con_backup = DriverManager.getConnection("jdbc:mysql://localhost:3310/timetablemanagementbackup","root","");
            Statement st_backup = con_backup.createStatement();
            String sql_backup = "select * from schedulingtable";
            PreparedStatement pst_backup = con_backup.prepareStatement(sql_backup);
            ResultSet rs_backup = pst_backup.executeQuery(sql_backup);
            
            ResultSetMetaData stData_backup = rs_backup.getMetaData();
            int q_backup = stData_backup.getColumnCount();
            
            while(rs_backup.next()){
                Vector ColumnData = new Vector();
                for(int i=1;i<=q;i++){
//                    ColumnData.add(rs.getString("count"));
                    ColumnData.add(rs_backup.getString("Date"));
                    ColumnData.add(rs_backup.getString("Time"));
                    ColumnData.add(rs_backup.getString("Subject"));
                    ColumnData.add(rs_backup.getString("Subject_Code"));
                    ColumnData.add(rs_backup.getString("Instructor_Name"));
                    ColumnData.add(rs_backup.getString("Class_Name"));
                    ColumnData.add(rs_backup.getString("Number_Of_Student"));
                    ColumnData.add(rs_backup.getString("count"));
                }
//                RecordTable.addRow(ColumnData);
            }
            
            // over the backup data
            
            DefaultTableModel RecordTable = (DefaultTableModel) Tablefortimetable.getModel();
            RecordTable.setRowCount(0);
            
            while(rs.next()){
                Vector ColumnData = new Vector();
                for(int i=1;i<=q;i++){
//                    ColumnData.add(rs.getString("count"));
                    ColumnData.add(rs.getString("Date"));
                    ColumnData.add(rs.getString("Time"));
                    ColumnData.add(rs.getString("Subject"));
                    ColumnData.add(rs.getString("Subject_Code"));
                    ColumnData.add(rs.getString("Instructor_Name"));
                    ColumnData.add(rs.getString("Class_Name"));
                    ColumnData.add(rs.getString("Number_Of_Student"));
                    ColumnData.add(rs.getString("count"));
                }
                RecordTable.addRow(ColumnData);
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        subject = new javax.swing.JTextField();
        subjectcode = new javax.swing.JTextField();
        instructorname = new javax.swing.JTextField();
        noofstudent = new javax.swing.JTextField();
        Scheduled = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        time = new javax.swing.JComboBox<>();
        back = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        update = new javax.swing.JButton();
        Date = new javax.swing.JLabel();
        Day = new javax.swing.JComboBox<>();
        show = new javax.swing.JButton();
        classname = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tablefortimetable = new javax.swing.JTable();
        background4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setText("SCHEDULING MODULE");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(100, 40, 460, 60);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("Date                       :");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(40, 130, 140, 30);

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Time                       :");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(40, 180, 150, 30);

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("Subject                   :");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(40, 220, 160, 40);

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(240, 240, 240));
        jLabel5.setText("Subject code          :");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(40, 270, 150, 40);

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(240, 240, 240));
        jLabel6.setText("Instructor Name     : ");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(40, 320, 160, 40);

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setText("Class name              :");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(40, 370, 140, 30);

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setText("Number of Student :");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(40, 410, 140, 40);
        jPanel1.add(subject);
        subject.setBounds(190, 220, 260, 30);
        jPanel1.add(subjectcode);
        subjectcode.setBounds(190, 270, 260, 30);
        jPanel1.add(instructorname);
        instructorname.setBounds(190, 320, 260, 30);
        jPanel1.add(noofstudent);
        noofstudent.setBounds(190, 420, 260, 30);

        Scheduled.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Scheduled.setText("Scheduled");
        Scheduled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduledActionPerformed(evt);
            }
        });
        jPanel1.add(Scheduled);
        Scheduled.setBounds(650, 200, 120, 25);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(770, 470, 70, 25);

        time.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        time.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00 - 09:00", "09:00 - 10:00", "10:00 - 11:00", "11:00 - 11:15", "11:15 - 12:15", "12:15 - 13:15", "13:15 - 14:15", "14:15 - 14:30", "14:30 - 15:30", "15:30 - 16:30", "14:30 - 16:30", "08:00 - 10:00", "08:00 - 11:00", "11:15 - 13:15", "11:15 - 14:15" }));
        jPanel1.add(time);
        time.setBounds(190, 180, 260, 30);

        back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        back.setText("Back");
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back);
        back.setBounds(690, 470, 70, 25);

        clear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clear.setText("Clear_Table");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        jPanel1.add(clear);
        clear.setBounds(650, 240, 120, 25);

        update.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel1.add(update);
        update.setBounds(650, 280, 120, 25);

        Date.setForeground(new java.awt.Color(255, 51, 51));
        jPanel1.add(Date);
        Date.setBounds(20, 0, 220, 40);

        Day.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "a) Monday", "b) Tuesday", "c) Wednesday", "d) Thursday", "e) Friday" }));
        jPanel1.add(Day);
        Day.setBounds(190, 130, 260, 30);

        show.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        show.setText("Show");
        show.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showMouseClicked(evt);
            }
        });
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });
        jPanel1.add(show);
        show.setBounds(650, 320, 120, 25);

        classname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        classname.setEnabled(false);
        jPanel1.add(classname);
        classname.setBounds(190, 370, 260, 30);

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("TimeTable");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(730, 30, 120, 25);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("GET_PDF");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(650, 360, 120, 25);

        Tablefortimetable.setBackground(new java.awt.Color(153, 255, 153));
        Tablefortimetable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tablefortimetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Time", "Subject", "Subject_code", "Instructor_name", "Class_name", "No_Of_Student", "count"
            }
        ));
        Tablefortimetable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Tablefortimetable.setAutoscrolls(false);
        Tablefortimetable.setGridColor(new java.awt.Color(51, 51, 51));
        Tablefortimetable.setSelectionForeground(new java.awt.Color(153, 153, 255));
        Tablefortimetable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablefortimetableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tablefortimetable);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 540, 873, 240);

        background4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/timetablemanagementsystem/background2.jpg"))); // NOI18N
        jPanel1.add(background4);
        background4.setBounds(10, -140, 1020, 750);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ScheduledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduledActionPerformed
        // TODO add your handling code here:
        if(subject.getText().equals("") || subjectcode.getText().equals("") || instructorname.getText().equals("") || noofstudent.getText().equals("")){
                JOptionPane.showMessageDialog(this,"Please Fill required Fields");
        }
        else{
        JOptionPane.showMessageDialog(this, "Recorded Successfully !");
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3310/timetablemanagement","root","");
            String sql = "insert into schedulingtable (Date,Time,Subject,Subject_Code,Instructor_Name,Class_Name,Number_of_Student) values (?,?,?,?,?,?,?)";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, Day.getItemAt(Day.getSelectedIndex()));
            pst.setString(2, time.getItemAt(time.getSelectedIndex()));
            pst.setString(3, subject.getText());
            pst.setString(4, subjectcode.getText());
            pst.setString(5, instructorname.getText());
            pst.setString(6, classname.getText());
            pst.setString(7, noofstudent.getText());
           
            
            pst.executeUpdate();
            
            // for backup details
            Class.forName("com.mysql.jdbc.Driver");
            Connection con_backup = DriverManager.getConnection("jdbc:mysql://localhost:3310/timetablemanagementbackup","root","");
            String sql_backup = "insert into schedulingtable (Date,Time,Subject,Subject_Code,Instructor_Name,Class_Name,Number_of_Student) values (?,?,?,?,?,?,?)";
            PreparedStatement pst_backup = con_backup.prepareStatement(sql);
            pst_backup.setString(1, Day.getItemAt(Day.getSelectedIndex()));
            pst_backup.setString(2, time.getItemAt(time.getSelectedIndex()));
            pst_backup.setString(3, subject.getText());
            pst_backup.setString(4, subjectcode.getText());
            pst_backup.setString(5, instructorname.getText());
            pst_backup.setString(6, classname.getText());
            pst_backup.setString(7, noofstudent.getText());
           
            
            pst_backup.executeUpdate();
            //backup details is over
         
            JOptionPane.showMessageDialog(this, "Row Is created Successfully");
            updateDB();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        ClearFields();
        
            
        }
        

        
        
        
    }//GEN-LAST:event_ScheduledActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ClearFields();
        classname.setText(null);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Dashboard dash1 = new Dashboard();
        dash1.setVisible(true);
        
       
    }//GEN-LAST:event_backActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
//            DefaultTableModel tableModel = (DefaultTableModel) Tablefortimetable.getModel();
//            
//            if(Tablefortimetable.getSelectedRowCount()==1){
//               tableModel.removeRow(Tablefortimetable.getSelectedRowCount());
//            }
//            else{
//                if(Tablefortimetable.getSelectedRowCount()==0){
//                    JOptionPane.showMessageDialog(this, "The table is Empty");
//                    
//                }
//            }

        DefaultTableModel RecordTable = (DefaultTableModel) Tablefortimetable.getModel();
        int SelectedRows =Tablefortimetable.getSelectedRow();
        try{
        count = Integer.parseInt(RecordTable.getValueAt(SelectedRows, 7).toString());
        deleteItem = JOptionPane.showConfirmDialog(null, "Confirm If you want to delete Item","Warning",JOptionPane.YES_NO_CANCEL_OPTION);
        if(deleteItem==JOptionPane.YES_OPTION){
            
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3310/timetablemanagement","root","");
            String sql = "delete from schedulingtable where count=?";
            PreparedStatement pst = con.prepareStatement(sql); 
            
            pst.setInt(1, count);
            
            pst.executeUpdate();
         
            JOptionPane.showMessageDialog(this, "Row Is delete Successfully");
            updateDB();
            
        ClearFields(); // this method declare in the top of the program.           
        }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_clearActionPerformed

    private void TablefortimetableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablefortimetableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel RecordTable = (DefaultTableModel) Tablefortimetable.getModel();
        int SelectedRows =Tablefortimetable.getSelectedRow();
        Day.setSelectedItem(RecordTable.getValueAt(SelectedRows, 0).toString());
        time.setSelectedItem(RecordTable.getValueAt(SelectedRows, 1).toString());
        subject.setText(RecordTable.getValueAt(SelectedRows, 2).toString());
        subjectcode.setText(RecordTable.getValueAt(SelectedRows, 3).toString());
        instructorname.setText(RecordTable.getValueAt(SelectedRows, 4).toString());
        classname.setText(RecordTable.getValueAt(SelectedRows, 5).toString());
        noofstudent.setText(RecordTable.getValueAt(SelectedRows, 6).toString());
//        count.setText(RecordTable.getValueAt(SelectedRows, 7).hashCode());
         
    }//GEN-LAST:event_TablefortimetableMouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel RecordTable = (DefaultTableModel) Tablefortimetable.getModel();
        int SelectedRows =Tablefortimetable.getSelectedRow();
        try{
            count = Integer.parseInt(RecordTable.getValueAt(SelectedRows, 0x7).toString());
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3310/timetablemanagement","root","");
            String sql = "update schedulingtable set Date =?, Time =?, Subject =?, Subject_Code =?, Instructor_Name =?, Class_Name =?, Number_Of_Student =? where count=?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, Day.getItemAt(Day.getSelectedIndex()));
            pst.setString(2, time.getItemAt(time.getSelectedIndex()));
            pst.setString(3, subject.getText());
            pst.setString(4, subjectcode.getText());
            pst.setString(5, instructorname.getText()); 
            pst.setString(6, classname.getText());
            pst.setString(7, noofstudent.getText());
            pst.setInt(8, count);
            
            pst.executeUpdate();
            
            // backup details
            int count_backup = Integer.parseInt(RecordTable.getValueAt(SelectedRows, 0x7).toString());
            Class.forName("com.mysql.jdbc.Driver");
            Connection con_backup = DriverManager.getConnection("jdbc:mysql://localhost:3310/timetablemanagementbackup","root","");
            String sql_backup = "update schedulingtable set Date =?, Time =?, Subject =?, Subject_Code =?, Instructor_Name =?, Class_Name =?, Number_Of_Student =? where count=?";
            PreparedStatement pst_backup = con_backup.prepareStatement(sql_backup);
            pst_backup.setString(1, Day.getItemAt(Day.getSelectedIndex()));
            pst_backup.setString(2, time.getItemAt(time.getSelectedIndex()));
            pst_backup.setString(3, subject.getText());
            pst_backup.setString(4, subjectcode.getText());
            pst_backup.setString(5, instructorname.getText()); 
            pst_backup.setString(6, classname.getText());
            pst_backup.setString(7, noofstudent.getText());
            pst_backup.setInt(8, count_backup);
            
            pst_backup.executeUpdate();
            // backup details is over
         
            JOptionPane.showMessageDialog(this, "Row Is updated Successfully");
            updateDB();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_updateActionPerformed

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_showActionPerformed

    private void showMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showMouseClicked
        // TODO add your handling code here:
        showDB();
    }//GEN-LAST:event_showMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String path ="";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);
        
        if(x ==JFileChooser.APPROVE_OPTION){
            path = j.getSelectedFile().getPath();
        }
        
        Document doc = new Document();
        
        try {
            PdfWriter writer = PdfWriter.getInstance(doc,new FileOutputStream(path+"\\Scheduling.pdf"));
            doc.open();
            PdfPTable tbl = new PdfPTable(7);
            tbl.addCell("Date");
            tbl.addCell("Time");
            tbl.addCell("Subject");
            tbl.addCell("Subject_Code");
            tbl.addCell("Instructor");
            tbl.addCell("Class_name");
            tbl.addCell("No_OF_Student");
             
             for(int i=0; i<Tablefortimetable.getRowCount(); i++){
                 String Date = Tablefortimetable.getValueAt(i, 0).toString();
                 String Time = Tablefortimetable.getValueAt(i, 1).toString();
                 String Subject = Tablefortimetable.getValueAt(i, 2).toString();
                 String Subject_Code = Tablefortimetable.getValueAt(i, 3).toString();
                 String Instructor = Tablefortimetable.getValueAt(i, 4).toString();
                 String Class = Tablefortimetable.getValueAt(i, 5).toString();
                 String Sstudent = Tablefortimetable.getValueAt(i, 6).toString();
                 
                 tbl.addCell(Date);
                 tbl.addCell(Time);
                 tbl.addCell(Subject);
                 tbl.addCell(Subject_Code);
                 tbl.addCell(Instructor);
                 tbl.addCell(Class);
                 tbl.addCell(Sstudent);
                            
             }
             
             doc.add(tbl);
             JOptionPane.showMessageDialog(null, "Download PDF file", "Alert Msg", JOptionPane.WARNING_MESSAGE);
             doc.close();
             writer.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ReportingModule.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(ReportingModule.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String path ="";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);
        
        if(x ==JFileChooser.APPROVE_OPTION){
            path = j.getSelectedFile().getPath();
        }
        
        Document doc = new Document();
        
        try {
            PdfWriter writer = PdfWriter.getInstance(doc,new FileOutputStream(path+"\\TimeTable.pdf"));
            doc.open();
            Paragraph p = new Paragraph("Time Table Management System",large);
            p.setAlignment(Paragraph.ALIGN_CENTER);
            doc.add(p);
            
            Paragraph p1 = new Paragraph(" ");
            p1.setAlignment(Paragraph.ALIGN_CENTER);
            doc.add(p1);
            
            PdfPTable tbl = new PdfPTable(6);
            tbl.addCell("Date");
            tbl.addCell("Time");
            tbl.addCell("Subject");
            tbl.addCell("Subject_Code");
            tbl.addCell("Instructor");
            tbl.addCell("Class_name");
             
             for(int i=0; i<Tablefortimetable.getRowCount(); i++){
                 String Date = Tablefortimetable.getValueAt(i, 0).toString();
                 String Time = Tablefortimetable.getValueAt(i, 1).toString();
                 String Subject = Tablefortimetable.getValueAt(i, 2).toString();
                 String Subject_Code = Tablefortimetable.getValueAt(i, 3).toString();
                 String Instructor = Tablefortimetable.getValueAt(i, 4).toString();
                 String Class = Tablefortimetable.getValueAt(i, 5).toString();
                 
                 tbl.addCell(Date);
                 tbl.addCell(Time);
                 tbl.addCell(Subject);
                 tbl.addCell(Subject_Code);
                 tbl.addCell(Instructor);
                 tbl.addCell(Class);
                            
             }
             
             doc.add(tbl);
             JOptionPane.showMessageDialog(null, "Download PDF file", "Alert Msg", JOptionPane.WARNING_MESSAGE);
             doc.close();
             writer.close();
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ReportingModule.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(ReportingModule.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:
//        Dashboard dash = new Dashboard();
//        dash.setVisible(true);
//        this.setVisible(false);
    }//GEN-LAST:event_backMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SchedulingModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SchedulingModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SchedulingModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SchedulingModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SchedulingModule l = new SchedulingModule();
//                l.setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\Hasitha\\Documents\\NetBeansProjects\\TimeTableManagementSystem\\src\\timetablemanagementsystem\\hasi.png"));
                l.setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Date;
    private javax.swing.JComboBox<String> Day;
    private javax.swing.JButton Scheduled;
    private javax.swing.JTable Tablefortimetable;
    private javax.swing.JButton back;
    private javax.swing.JLabel background4;
    public javax.swing.JTextField classname;
    private javax.swing.JButton clear;
    private javax.swing.JTextField instructorname;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField noofstudent;
    private javax.swing.JButton show;
    private javax.swing.JTextField subject;
    private javax.swing.JTextField subjectcode;
    private javax.swing.JComboBox<String> time;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
